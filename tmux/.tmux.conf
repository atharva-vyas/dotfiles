# REQUIREMENTS => https://github.com/tmux-plugins/tpm
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

set-option -g default-shell /usr/bin/fish

# Optional: Enable mouse mode
set -g mouse on

# Enable vi mode
set-window-option -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
# Setup 'y' to yank (copy) as in Vim
set -g set-clipboard on
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "tmux save-buffer - | xclip -selection clipboard -i"
# Speeds up Slow vim escape from insert mode
set -sg escape-time 10


unbind -T copy-mode-vi MouseDragEnd1Pane

set -g base-index 1




# CUSTOM
set -g prefix C-a
unbind C-b
bind-key C-a send-prefix


unbind %
bind '\' split-window -h

unbind '"'
bind - split-window -v

unbind r
bind r source-file ~/.tmux.conf

bind -r m resize-pane -Z



# SWTICH BETWEEN TMUX & NVIM PANES WHILE IN DOCKER (work in progress)
# SWTICH BETWEEN TMUX & NVIM PANES WHILE IN DOCKER (work in progress)
# SWTICH BETWEEN TMUX & NVIM PANES WHILE IN DOCKER (work in progress)
# 
# 
# 
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l



# INTEGRATION WITH DOCKER (work in progress)
# INTEGRATION WITH DOCKER (work in progress)
# INTEGRATION WITH DOCKER (work in progress)
bind i run "tmux display-message 'Process: #{@pane-is-vim} - #{pane_current_command}'"

# bind p if-shell \
# "[ '#{pane_current_command}' = 'docker' ]" \
# "display-message 'Docker is running in the current pane.'" \
"display-message '...#{pane_current_command}...'"


# bind p if-shell \
# "[ '#{pane_current_command}' = 'docker' ]" \
# "run-shell 'tmux set -p @pane-is-vim true'" \
# "run-shell 'tmux set -p @pane-is-vim false'"


# Smart pane switching with awareness of Vim splits
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
# bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\\' 'select-pane -l'


bind-key p if-shell \
"[ '#{@pane-is-vim}' = '1' ]" \
"run-shell 'tmux set-option -p @pane-is-vim 0'" \
"run-shell 'tmux set-option -p @pane-is-vim 1'"


bind o run "tmux display-message 'Process: #{@pane-is-vim} - #{pane_current_command}'"



# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# if-shell '[ -f /.dockerenv ]' \
#   "is_vim=\"ps -o state=,comm= -t '#{pane_tty}' \
#       | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'\""
#   # Filter out docker instances of nvim from the host system to prevent
#   # host from thinking nvim is running in a pseudoterminal when its not.
#   "is_vim=\"ps -o state=,comm=,cgroup= -t '#{pane_tty}' \
#       | grep -ivE '^.+ +.+ +.+\\/docker\\/.+$' \
#       | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)? +'\""




# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
